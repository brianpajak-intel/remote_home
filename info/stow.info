Ceci est le fichier Info stow.info, produit par Makeinfo version 4.0b à
partir stow.texi.

INFO-DIR-SECTION Administration
START-INFO-DIR-ENTRY
* Stow: (stow).           GNU Stow.
END-INFO-DIR-ENTRY

   This file describes GNU Stow version 1.3.3, a program for managing
the installation of software packages.

   Software and documentation Copyright (C) 1993, 1994, 1995, 1996 by
Bob Glickstein <bobg+stow@zanshin.com>.  Copyright (C) 2000,2001
Guillaume Morin <gmorin@gnu.org>

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the section entitled "GNU General Public License" is included with
the modified manual, and provided that the entire resulting derived
work is distributed under the terms of a permission notice identical to
this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.


File: stow.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

   This manual describes GNU Stow 1.3.3, a program for managing the
installation of software packages.

* Menu:

* Introduction::                Description of Stow.
* Terminology::                 Terms used by this manual.
* Invoking Stow::               Option summary.
* Installing packages::         Using Stow to install.
* Deleting packages::           Using Stow to uninstall.
* Caveats::                     Pitfalls and difficulties to beware.
* Bootstrapping::               When stow and perl are not yet stowed.
* Reporting bugs::              How, what, where, and when to report.
* Known bugs::                  Don't report any of these.
* GNU General Public License::  Copying terms.
* Index::                       Index of concepts.

 --- The Detailed Node Listing ---

Caveats

* Compile-time and install-time::  Faking out `make install'.
* Multiple stow directories::   Further segregating software.
* Conflicts::                   When Stow can't stow.

Compile-time and install-time

* GNU Emacs::
* Other FSF software::
* Cygnus software::
* Perl and Perl 5 modules::


File: stow.info,  Node: Introduction,  Next: Terminology,  Prev: Top,  Up: Top

Introduction
************

   Stow is a tool for managing the installation of multiple software
packages in the same run-time directory tree.  One historical difficulty
of this task has been the need to administer, upgrade, install, and
remove files in independent packages without confusing them with other
files sharing the same filesystem space.  For instance, it is common to
install Perl and Emacs in `/usr/local'.  When one does so, one winds up
with the following files(1) in `/usr/local/man/man1': `a2p.1';
`ctags.1'; `emacs.1'; `etags.1'; `h2ph.1'; `perl.1'; and `s2p.1'.  Now
suppose it's time to uninstall Perl.  Which man pages get removed?
Obviously `perl.1' is one of them, but it should not be the
administrator's responsibility to memorize the ownership of individual
files by separate packages.

   The approach used by Stow is to install each package into its own
tree, then use symbolic links to make it appear as though the files are
installed in the common tree.  Administration can be performed in the
package's private tree in isolation from clutter from other packages.
Stow can then be used to update the symbolic links.  The structure of
each private tree should reflect the desired structure in the common
tree; i.e. (in the typical case) there should be a `bin' directory
containing executables, a `man/man1' directory containing section 1 man
pages, and so on.

   Stow was inspired by Carnegie Mellon's Depot program, but is
substantially simpler and safer.  Whereas Depot required database files
to keep things in sync, Stow stores no extra state between runs, so
there's no danger (as there was in Depot) of mangling directories when
file hierarchies don't match the database.  Also unlike Depot, Stow will
never delete any files, directories, or links that appear in a Stow
directory (e.g., `/usr/local/stow/emacs'), so it's always possible to
rebuild the target tree (e.g., `/usr/local').

   For information about the latest version of Stow, you can refer to
http://www.gnu.org/software/stow/.

   ---------- Footnotes ----------

   (1) As of Perl 4.036 and Emacs 19.22.


File: stow.info,  Node: Terminology,  Next: Invoking Stow,  Prev: Introduction,  Up: Top

Terminology
***********

   A "package" is a related collection of files and directories that
you wish to administer as a unit--e.g., Perl or Emacs--and that needs
to be installed in a particular directory structure--e.g., with `bin',
`lib', and `man' subdirectories.

   A "target directory" is the root of a tree in which one or more
packages wish to _appear_ to be installed.  A common, but by no means
the only such location is `/usr/local'.  The examples in this manual
will use `/usr/local' as the target directory.

   A "stow directory" is the root of a tree containing separate
packages in private subtrees.  When Stow runs, it uses the current
directory as the default stow directory.  The examples in this manual
will use `/usr/local/stow' as the stow directory, so that individual
packages will be, for example, `/usr/local/stow/perl' and
`/usr/local/stow/emacs'.

   An "installation image" is the layout of files and directories
required by a package, relative to the target directory.  Thus, the
installation image for Perl includes:  a `bin' directory containing
`perl' and `a2p' (among others); an `info' directory containing Texinfo
documentation; a `lib/perl' directory containing Perl libraries; and a
`man/man1' directory containing man pages.

   A "package directory" is the root of a tree containing the
installation image for a particular package.  Each package directory
must reside in a stow directory--e.g., the package directory
`/usr/local/stow/perl' must reside in the stow directory
`/usr/local/stow'.  The "name" of a package is the name of its
directory within the stow directory--e.g., `perl'.

   Thus, the Perl executable might reside in
`/usr/local/stow/perl/bin/perl', where `/usr/local' is the target
directory, `/usr/local/stow' is the stow directory,
`/usr/local/stow/perl' is the package directory, and `bin/perl' within
is part of the installation image.

   A "symlink" is a symbolic link.  A symlink can be "relative" or
"absolute".  An absolute symlink names a full path; that is, one
starting from `/'.  A relative symlink names a relative path; that is,
one not starting from `/'.  The target of a relative symlink is
computed starting from the symlink's own directory.  Stow only creates
relative symlinks.


File: stow.info,  Node: Invoking Stow,  Next: Installing packages,  Prev: Terminology,  Up: Top

Invoking Stow
*************

   The syntax of the `stow' command is:

     stow [OPTIONS] PACKAGE ...

   The stow directory is assumed to be the current directory, and the
target directory is assumed to be the parent of the current directory
(so it is typical to execute `stow' from the directory
`/usr/local/stow').  Each PACKAGE is the name of a package in the stow
directory (e.g., `perl').  By default, they are installed into the
target directory (but they can be deleted instead using `-D').

   The options are:

`-n'
`--no'
     Do not perform any operations that modify the filesystem; merely
     show what would happen.  Since no actual operations are performed,
     `stow -n' could report conflicts when none would actually take
     place (*note Conflicts::); but it won't fail to report conflicts
     that _would_ take place.

`-c'
`--conflicts'
     Do not exit immediately when a conflict is encountered.  This
     option implies `-n', and is used to search for all conflicts that
     might arise from an actual Stow operation.  As with `-n', however,
     false conflicts might be reported (*note Conflicts::).

`-d DIR'
`--dir=DIR'
     Set the stow directory to DIR instead of the current directory.
     This also has the effect of making the default target directory be
     the parent of DIR.

`-t DIR'
`--target=DIR'
     Set the target directory to DIR instead of the parent of the stow
     directory.

`-v'
`--verbose[=N]'
     Send verbose output to standard error describing what Stow is
     doing.  Verbosity levels are 0, 1, 2, and 3; 0 is the default.
     Using `-v' or `--verbose' increases the verbosity by one; using
     `--verbose=N' sets it to N.

`-D'
`--delete'
     Delete packages from the target directory rather than installing
     them.

`-R'
`--restow'
     Restow packages (first unstow, then stow again).  This is useful
     for pruning obsolete symlinks from the target tree after updating
     the software in a package.

`-V'
`--version'
     Show Stow version number, and exit.

`-h'
`--help'
     Show Stow command syntax, and exit.


File: stow.info,  Node: Installing packages,  Next: Deleting packages,  Prev: Invoking Stow,  Up: Top

Installing packages
*******************

   The default action of Stow is to install a package.  This means
creating symlinks in the target tree that point into the package tree.
Stow attempts to do this with as few symlinks as possible; in other
words, if Stow can create a single symlink that points to an entire
subtree within the package tree, it will choose to do that rather than
create a directory in the target tree and populate it with symlinks.

   For example, suppose that no packages have yet been installed in
`/usr/local'; it's completely empty (except for the `stow'
subdirectory, of course).  Now suppose the Perl package is installed.
Recall that it includes the following directories in its installation
image:  `bin'; `info'; `lib/perl'; `man/man1'.  Rather than creating
the directory `/usr/local/bin' and populating it with symlinks to
`../stow/perl/bin/perl' and `../stow/perl/bin/a2p' (and so on), Stow
will create a single symlink, `/usr/local/bin', which points to
`stow/perl/bin'.  In this way, it still works to refer to
`/usr/local/bin/perl' and `/usr/local/bin/a2p', and fewer symlinks have
been created.  This is called "tree folding", since an entire subtree
is "folded" into a single symlink.

   To complete this example, Stow will also create the symlink
`/usr/local/info' pointing to `stow/perl/info'; the symlink
`/usr/local/lib' pointing to `stow/perl/lib'; and the symlink
`/usr/local/man' pointing to `stow/perl/man'.

   Now suppose that instead of installing the Perl package into an empty
target tree, the target tree is not empty to begin with.  Instead, it
contains several files and directories installed under a different
system-administration philosophy.  In particular, `/usr/local/bin'
already exists and is a directory, as are `/usr/local/lib' and
`/usr/local/man/man1'.  In this case, Stow will descend into
`/usr/local/bin' and create symlinks to `../stow/perl/bin/perl' and
`../stow/perl/bin/a2p' (etc.), and it will descend into
`/usr/local/lib' and create the tree-folding symlink `perl' pointing to
`../stow/perl/lib/perl', and so on.  As a rule, Stow only descends as
far as necessary into the target tree when it can create a tree-folding
symlink.

   The time often comes when a tree-folding symlink has to be undone
because another package uses one or more of the folded subdirectories in
its installation image.  This operation is called "splitting open" a
folded tree.  It involves removing the original symlink from the target
tree, creating a true directory in its place, and then populating the
new directory with symlinks to the newly-installed package _and_ to the
old package that used the old symlink.  For example, suppose that after
installing Perl into an empty `/usr/local', we wish to install Emacs.
Emacs's installation image includes a `bin' directory containing the
`emacs' and `etags' executables, among others.  Stow must make these
files appear to be installed in `/usr/local/bin', but presently
`/usr/local/bin' is a symlink to `stow/perl/bin'.  Stow therefore takes
the following steps:  the symlink `/usr/local/bin' is deleted; the
directory `/usr/local/bin' is created; links are made from
`/usr/local/bin' to `../stow/emacs/bin/emacs' and
`../stow/emacs/bin/etags'; and links are made from `/usr/local/bin' to
`../stow/perl/bin/perl' and `../stow/perl/bin/a2p'.

   When splitting open a folded tree, Stow makes sure that the symlink
it is about to remove points inside a valid package in the current stow
directory.  _Stow will never delete anything that it doesn't own_.
Stow "owns" everything living in the target tree that points into a
package in the stow directory.  Anything Stow owns, it can recompute if
lost.  Note that by this definition, Stow doesn't "own" anything _in_
the stow directory or in any of the packages.

   If Stow needs to create a directory or a symlink in the target tree
and it cannot because that name is already in use and is not owned by
Stow, then a conflict has arisen.  *Note Conflicts::.


File: stow.info,  Node: Deleting packages,  Next: Caveats,  Prev: Installing packages,  Up: Top

Deleting packages
*****************

   When the `-D' option is given, the action of Stow is to delete a
package from the target tree.  Note that Stow will not delete anything
it doesn't "own".  Deleting a package does _not_ mean removing it from
the stow directory or discarding the package tree.

   To delete a package, Stow recursively scans the target tree,
skipping over the stow directory (since that is usually a subdirectory
of the target tree) and any other stow directories it encounters (*note
Multiple stow directories::).  Any symlink it finds that points into
the package being deleted is removed.  Any directory that contained
only symlinks to the package being deleted is removed.  Any directory
that, after removing symlinks and empty subdirectories, contains only
symlinks to a single other package, is considered to be a previously
"folded" tree that was "split open."  Stow will re-fold the tree by
removing the symlinks to the surviving package, removing the directory,
then linking the directory back to the surviving package.


File: stow.info,  Node: Caveats,  Next: Bootstrapping,  Prev: Deleting packages,  Up: Top

Caveats
*******

   This chapter describes the common problems that arise with Stow.

* Menu:

* Compile-time and install-time::  Faking out `make install'.
* Multiple stow directories::   Further segregating software.
* Conflicts::                   When Stow can't stow.


File: stow.info,  Node: Compile-time and install-time,  Next: Multiple stow directories,  Prev: Caveats,  Up: Caveats

Compile-time and install-time
=============================

   Software whose installation is managed with Stow needs to be
installed in one place (the package directory, e.g.
`/usr/local/stow/perl') but needs to appear to run in another place
(the target tree, e.g., `/usr/local').  Why is this important?  What's
wrong with Perl, for instance, looking for its files in
`/usr/local/stow/perl' instead of in `/usr/local'?

   The answer is that there may be another package, e.g.,
`/usr/local/stow/perl-extras', stowed under `/usr/local'.  If Perl is
configured to find its files in `/usr/local/stow/perl', it will never
find the extra files in the `perl-extras' package, even though they're
intended to be found by Perl.  On the other hand, if Perl looks for its
files in `/usr/local', then it will find the intermingled Perl and
`perl-extras' files.

   This means that when you compile a package, you must tell it the
location of the run-time, or target tree; but when you install it, you
must place it in the stow tree.

   Some software packages allow you to specify, at compile-time,
separate locations for installation and for run-time.  Perl is one such
package; see *Note Perl and Perl 5 modules::.  Others allow you to
compile the package, then give a different destination in the `make
install' step without causing the binaries or other files to get
rebuilt.  Most GNU software falls into this category; Emacs is a
notable exception.  See *Note GNU Emacs::, and *Note Other FSF
software::.

   Still other software packages cannot abide the idea of separate
installation and run-time locations at all.  If you try to `make
install prefix=/usr/local/stow/FOO', then first the whole package will
be recompiled to hardwire the `/usr/local/stow/FOO' path.  With these
packages, it is best to compile normally, then run `make -n install',
which should report all the steps needed to install the just-built
software.  Place this output into a file, edit the commands in the file
to remove recompilation steps and to reflect the Stow-based
installation location, and execute the edited file as a shell script in
place of `make install'.  Be sure to execute the script using the same
shell that `make install' would have used.

   (If you use GNU Make and a shell [such as GNU bash] that understands
`pushd' and `popd', you can do the following:

  1. Replace all lines matching `make[N]: Entering directory `DIR''
     with `pushd DIR'.

  2. Replace all lines matching `make[N]: Leaving directory `DIR'' with
     `popd'.

  3. Delete all lines matching `make[N]: Nothing to be done for RULE'.

   Then find other lines in the output containing `cd' or `make'
commands and rewrite or delete them.  In particular, you should be able
to delete sections of the script that resemble this:

     for i in DIR_1 DIR_2 ...; do \
       (cd $i; make ARGS ...) \
     done

Note, that's "should be able to," not "can."  Be sure to modulate these
guidelines with plenty of your own intelligence.)

   The details of stowing some specific packages are described in the
following sections.

* Menu:

* GNU Emacs::
* Other FSF software::
* Cygnus software::
* Perl and Perl 5 modules::


File: stow.info,  Node: GNU Emacs,  Next: Other FSF software,  Prev: Compile-time and install-time,  Up: Compile-time and install-time

GNU Emacs
---------

   Although the Free Software Foundation has many enlightened practices
regarding Makefiles and software installation (see *note Other FSF
software::), Emacs, its flagship program, doesn't quite follow the
rules.  In particular, most GNU software allows you to write:

     make
     make install prefix=/usr/local/stow/PACKAGE

If you try this with Emacs, then the new value for `prefix' in the
`make install' step will cause some files to get recompiled with the
new value of `prefix' wired into them.  In Emacs 19.23 and later,(1)
the way to work around this problem is:

     make
     make install-arch-dep install-arch-indep prefix=/usr/local/stow/emacs

   In 19.22 and some prior versions of Emacs, the workaround was:

     make
     make do-install prefix=/usr/local/stow/emacs

   ---------- Footnotes ----------

   (1) As I write this, the current version of Emacs is 19.31.


File: stow.info,  Node: Other FSF software,  Next: Cygnus software,  Prev: GNU Emacs,  Up: Compile-time and install-time

Other FSF software
------------------

   The Free Software Foundation, the organization behind the GNU
project, has been unifying the build procedure for its tools for some
time.  Thanks to its tools `autoconf' and `automake', most packages now
respond well to these simple steps, with no other intervention
necessary:

     ./configure OPTIONS
     make
     make install prefix=/usr/local/stow/PACKAGE

   Hopefully, these tools can evolve to be aware of Stow-managed
packages, such that providing an option to `configure' can allow `make'
and `make install' steps to work correctly without needing to "fool"
the build process.


File: stow.info,  Node: Cygnus software,  Next: Perl and Perl 5 modules,  Prev: Other FSF software,  Up: Compile-time and install-time

Cygnus software
---------------

   Cygnus is a commercial supplier and supporter of GNU software.  It
has also written several of its own packages, released under the terms
of the GNU General Public License; and it has taken over the
maintenance of other packages.  Among the packages released by Cygnus
are `gdb', `gnats', and `dejagnu'.

   Cygnus packages have the peculiarity that each one unpacks into a
directory tree with a generic top-level Makefile, which is set up to
compile _all_ of Cygnus' packages, any number of which may reside under
the top-level directory.  In other words, even if you're only building
`gnats', the top-level Makefile will look for, and try to build, `gdb'
and `dejagnu' subdirectories, among many others.

   The result is that if you try `make -n install
prefix=/usr/local/stow/PACKAGE' at the top level of a Cygnus package,
you'll get a bewildering amount of output.  It will then be very
difficult to visually scan the output to see whether the install will
proceed correctly.  Unfortunately, it's not always clear how to invoke
an install from the subdirectory of interest.

   In cases like this, the best approach is to run your `make install
prefix=...', but be ready to interrupt it if you detect that it is
recompiling files.  Usually it will work just fine; otherwise, install
manually.


File: stow.info,  Node: Perl and Perl 5 modules,  Prev: Cygnus software,  Up: Compile-time and install-time

Perl and Perl 5 modules
-----------------------

   Perl 4.036 allows you to specify different locations for installation
and for run-time.  It is the only widely-used package in this author's
experience that allows this, though hopefully more packages will adopt
this model.

   Unfortunately, the authors of Perl believed that only AFS sites need
this ability.  The configuration instructions for Perl 4 misleadingly
state that some occult means are used under AFS to transport files from
their installation tree to their run-time tree.  In fact, that confusion
arises from the fact that Depot, Stow's predecessor, originated at
Carnegie Mellon University, which was also the birthplace of AFS.  CMU's
need to separate install-time and run-time trees stemmed from its use of
Depot, not from AFS.

   The result of this confusion is that Perl 5's configuration script
doesn't even offer the option of separating install-time and run-time
trees _unless_ you're running AFS.  Fortunately, after you've entered
all the configuration settings, Perl's setup script gives you the
opportunity to edit those settings in a file called `config.sh'.  When
prompted, you should edit this file and replace occurrences of

     inst.../usr/local...

with

     inst.../usr/local/stow/perl...

You can do this with the following Unix command:

     sed 's,^\(inst.*/usr/local\),\1/stow/perl,' config.sh > config.sh.new
     mv config.sh.new config.sh

   Hopefully, the Perl authors will correct this deficiency in Perl 5's
configuration mechanism.

   Perl 5 modules--i.e., extensions to Perl 5--generally conform to a
set of standards for building and installing them.  The standard says
that the package comes with a top-level `Makefile.PL', which is a Perl
script.  When it runs, it generates a `Makefile'.

   If you followed the instructions above for editing `config.sh' when
Perl was built, then when you create a `Makefile' from a `Makefile.PL',
it will contain separate locations for run-time (`/usr/local') and
install-time (`/usr/local/stow/perl').  Thus you can do

     perl Makefile.PL
     make
     make install

and the files will be installed into `/usr/local/stow/perl'.  However,
you might prefer each Perl module to be stowed separately.  In that
case, you must edit the resulting Makefile, replacing
`/usr/local/stow/perl' with `/usr/local/stow/MODULE'.  The best way to
do this is:

     perl Makefile.PL
     find . -name Makefile -print | \
       xargs perl -pi~ -e 's,^(INST.*/stow)/perl,$1/MODULE,;'
     make
     make install

(The use of `find' and `xargs' ensures that all Makefiles in the
module's source tree, even those in subdirectories, get edited.)  A
good convention to follow is to name the stow directory for a Perl
MODULE `cpan.MODULE', where `cpan' stands for Comprehensive Perl
Archive Network, a collection of FTP sites that is the source of most
Perl 5 extensions.  This way, it's easy to tell at a glance which of
the subdirectories of `/usr/local/stow' are Perl 5 extensions.

   When you stow separate Perl 5 modules separately, you are likely to
encounter conflicts (*note Conflicts::) with files named `.exists' and
`perllocal.pod'.  One way to work around this is to remove those files
before stowing the module.  If you use the `cpan.MODULE' naming
convention, you can simply do this:

     cd /usr/local/stow
     find cpan.* \( -name .exists -o -name perllocal.pod \) -print | \
       xargs rm


File: stow.info,  Node: Multiple stow directories,  Next: Conflicts,  Prev: Compile-time and install-time,  Up: Caveats

Multiple stow directories
=========================

   If there are two or more system administrators who wish to maintain
software separately, or if there is any other reason to want two or more
stow directories, it can be done by creating a file named `.stow' in
each stow directory.  The presence of `/usr/local/foo/.stow' informs
Stow that, though `foo' is not the current stow directory, and though
it is a subdirectory of the target directory, nevertheless it is _a_
stow directory and as such Stow doesn't "own" anything in it (*note
Installing packages::).  This will protect the contents of `foo' from a
`stow -D', for instance.

   When multiple stow directories share a target tree, the effectiveness
of Stow is reduced.  If a tree-folding symlink is encountered and needs
to be split open during an installation, but the symlink points into
the wrong stow directory, Stow will report a conflict rather than split
open the tree (because it doesn't consider itself to own the symlink,
and thus cannot remove it).


File: stow.info,  Node: Conflicts,  Prev: Multiple stow directories,  Up: Caveats

Conflicts
=========

   If, during installation, a file or symlink exists in the target tree
and has the same name as something Stow needs to create, and if the
existing name is not a folded tree that can be split open, then a
"conflict" has arisen.  A conflict also occurs if a directory exists
where Stow needs to place a symlink to a non-directory.  On the other
hand, if the existing name is merely a symlink that already points
where Stow needs it to, then no conflict has occurred.  (Thus it is
harmless to install a package that has already been installed.)

   A conflict causes Stow to exit immediately and print a warning
(unless `-c' is given), even if that means aborting an installation in
mid-package.

   When running Stow with the `-n' or `-c' options, no actual
filesystem-modifying operations take place.  Thus if a folded tree would
have been split open, but instead was left in place because `-n' or
`-c' was used, then Stow will report a "false conflict", since the
directory that Stow was expecting to populate has remained an
unpopulatable symlink.


File: stow.info,  Node: Bootstrapping,  Next: Reporting bugs,  Prev: Caveats,  Up: Top

Bootstrapping
*************

   Suppose you have a stow directory all set up and ready to go:
`/usr/local/stow/perl' contains the Perl installation,
`/usr/local/stow/stow' contains Stow itself, and perhaps you have other
packages waiting to be stowed.  You'd like to be able to do this:

     cd /usr/local/stow
     stow -vv *

but `stow' is not yet in your `PATH'.  Nor can you do this:

     cd /usr/local/stow
     stow/bin/stow -vv *

because the `#!' line at the beginning of `stow' tries to locate Perl
(usually in `/usr/local/bin/perl'), and that won't be found.  The
solution you must use is:

     cd /usr/local/stow
     perl/bin/perl stow/bin/stow -vv *


File: stow.info,  Node: Reporting bugs,  Next: Known bugs,  Prev: Bootstrapping,  Up: Top

Reporting bugs
**************

   Please send bug reports to the author, Bob Glickstein, by electronic
mail.  The address to use is `<bobg+stow@zanshin.com>'.  Please include:

   * the version number of Stow (`stow --version');

   * the version number of Perl (`perl -v');

   * the system information, which can often be obtained with `uname
     -a';

   * a description of the bug;

   * the precise command you gave;

   * the output from the command (preferably verbose output, obtained by
     adding `--verbose=3' to the Stow command line).

   Before reporting a bug, please read the manual carefully, especially
*Note Known bugs::, and *Note Caveats::, to see whether you're
encountering something that doesn't need reporting, such as a "false
conflict" (*note Conflicts::).


File: stow.info,  Node: Known bugs,  Next: GNU General Public License,  Prev: Reporting bugs,  Up: Top

Known bugs
**********

   * When using multiple stow directories (*note Multiple stow
     directories::), Stow fails to "split open" tree-folding symlinks
     (*note Installing packages::) that point into a stow directory
     which is not the one in use by the current Stow command.  Before
     failing, it should search the target of the link to see whether
     any element of the path contains a `.stow' file.  If it finds one,
     it can "learn" about the cooperating stow directory to
     short-circuit the `.stow' search the next time it encounters a
     tree-folding symlink.


File: stow.info,  Node: GNU General Public License,  Next: Index,  Prev: Known bugs,  Up: Top

GNU General Public License
**************************

                         Version 2, June 1991
     Copyright (C) 1989, 1991 Free Software Foundation, Inc.
     675 Mass Ave, Cambridge, MA 02139, USA
     
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

Preamble
========

   The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it in
new free programs; and that you know you can do these things.

   To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

   We protect your rights with two steps: (1) copyright the software,
and (2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

   Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

   Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

   The precise terms and conditions for copying, distribution and
modification follow.

    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
  0. This License applies to any program or other work which contains a
     notice placed by the copyright holder saying it may be distributed
     under the terms of this General Public License.  The "Program",
     below, refers to any such program or work, and a "work based on
     the Program" means either the Program or any derivative work under
     copyright law: that is to say, a work containing the Program or a
     portion of it, either verbatim or with modifications and/or
     translated into another language.  (Hereinafter, translation is
     included without limitation in the term "modification".)  Each
     licensee is addressed as "you".

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running the Program is not restricted, and the output from the
     Program is covered only if its contents constitute a work based on
     the Program (independent of having been made by running the
     Program).  Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
     source code as you receive it, in any medium, provided that you
     conspicuously and appropriately publish on each copy an appropriate
     copyright notice and disclaimer of warranty; keep intact all the
     notices that refer to this License and to the absence of any
     warranty; and give any other recipients of the Program a copy of
     this License along with the Program.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Program or any portion
     of it, thus forming a work based on the Program, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. You must cause the modified files to carry prominent notices
          stating that you changed the files and the date of any change.

       b. You must cause any work that you distribute or publish, that
          in whole or in part contains or is derived from the Program
          or any part thereof, to be licensed as a whole at no charge
          to all third parties under the terms of this License.

       c. If the modified program normally reads commands interactively
          when run, you must cause it, when started running for such
          interactive use in the most ordinary way, to print or display
          an announcement including an appropriate copyright notice and
          a notice that there is no warranty (or else, saying that you
          provide a warranty) and that users may redistribute the
          program under these conditions, and telling the user how to
          view a copy of this License.  (Exception: if the Program
          itself is interactive but does not normally print such an
          announcement, your work based on the Program is not required
          to print an announcement.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Program, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not
     apply to those sections when you distribute them as separate
     works.  But when you distribute the same sections as part of a
     whole which is a work based on the Program, the distribution of
     the whole must be on the terms of this License, whose permissions
     for other licensees extend to the entire whole, and thus to each
     and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Program.

     In addition, mere aggregation of another work not based on the
     Program with the Program (or with a work based on the Program) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
     under Section 2) in object code or executable form under the terms
     of Sections 1 and 2 above provided that you also do one of the
     following:

       a. Accompany it with the complete corresponding machine-readable
          source code, which must be distributed under the terms of
          Sections 1 and 2 above on a medium customarily used for
          software interchange; or,

       b. Accompany it with a written offer, valid for at least three
          years, to give any third party, for a charge no more than your
          cost of physically performing source distribution, a complete
          machine-readable copy of the corresponding source code, to be
          distributed under the terms of Sections 1 and 2 above on a
          medium customarily used for software interchange; or,

       c. Accompany it with the information you received as to the offer
          to distribute corresponding source code.  (This alternative is
          allowed only for noncommercial distribution and only if you
          received the program in object code or executable form with
          such an offer, in accord with Subsection b above.)

     The source code for a work means the preferred form of the work for
     making modifications to it.  For an executable work, complete
     source code means all the source code for all modules it contains,
     plus any associated interface definition files, plus the scripts
     used to control compilation and installation of the executable.
     However, as a special exception, the source code distributed need
     not include anything that is normally distributed (in either
     source or binary form) with the major components (compiler,
     kernel, and so on) of the operating system on which the executable
     runs, unless that component itself accompanies the executable.

     If distribution of executable or object code is made by offering
     access to copy from a designated place, then offering equivalent
     access to copy the source code from the same place counts as
     distribution of the source code, even though third parties are not
     compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense or distribute the Program is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

  5. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Program or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Program (or any work
     based on the Program), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from the
     original licensor to copy, distribute or modify the Program
     subject to these terms and conditions.  You may not impose any
     further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties to this License.

  7. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Program at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Program by all those who
     receive copies directly or indirectly through you, then the only
     way you could satisfy both it and this License would be to refrain
     entirely from distribution of the Program.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system, which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Program under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

  9. The Free Software Foundation may publish revised and/or new
     versions of the General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the Program
     does not specify a version number of this License, you may choose
     any version ever published by the Free Software Foundation.

 10. If you wish to incorporate parts of the Program into other free
     programs whose distribution conditions are different, write to the
     author to ask for permission.  For software which is copyrighted
     by the Free Software Foundation, write to the Free Software
     Foundation; we sometimes make exceptions for this.  Our decision
     will be guided by the two goals of preserving the free status of
     all derivatives of our free software and of promoting the sharing
     and reuse of software generally.

                                NO WARRANTY

 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY
     OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS

How to Apply These Terms to Your New Programs
=============================================

   If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND AN IDEA OF WHAT IT DOES.
     Copyright (C) 19YY  NAME OF AUTHOR
     
     This program is free software; you can redistribute it and/or
     modify it under the terms of the GNU General Public License
     as published by the Free Software Foundation; either version 2
     of the License, or (at your option) any later version.
     
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

   Also add information on how to contact you by electronic and paper
mail.

   If the program is interactive, make it output a short notice like
this when it starts in an interactive mode:

     Gnomovision version 69, Copyright (C) 19YY NAME OF AUTHOR
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
     type `show w'.  This is free software, and you are welcome
     to redistribute it under certain conditions; type `show c'
     for details.

   The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and `show
c'; they could even be mouse-clicks or menu items--whatever suits your
program.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the program,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright
     interest in the program `Gnomovision'
     (which makes passes at compilers) written
     by James Hacker.
     
     SIGNATURE OF TY COON, 1 April 1989
     Ty Coon, President of Vice

   This General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Library General Public License instead of this License.


File: stow.info,  Node: Index,  Prev: GNU General Public License,  Up: Top

Index
*****

* Menu:

* absolute symlink:                      Terminology.
* conflict:                              Installing packages.
* deletion:                              Deleting packages.
* directory folding:                     Installing packages.
* false conflict:                        Conflicts.
* folding trees:                         Installing packages.
* installation:                          Installing packages.
* installation image:                    Terminology.
* ownership:                             Installing packages.
* package:                               Terminology.
* package directory:                     Terminology.
* package name:                          Terminology.
* relative symlink:                      Terminology.
* splitting open folded trees:           Installing packages.
* stow directory:                        Terminology.
* symlink:                               Terminology.
* target directory:                      Terminology.
* tree folding:                          Installing packages.



Tag Table:
Node: Top1264
Node: Introduction2436
Ref: Introduction-Footnote-14584
Node: Terminology4626
Node: Invoking Stow6976
Node: Installing packages9170
Node: Deleting packages13287
Node: Caveats14437
Node: Compile-time and install-time14804
Node: GNU Emacs18106
Ref: GNU Emacs-Footnote-119090
Node: Other FSF software19154
Node: Cygnus software19910
Node: Perl and Perl 5 modules21383
Node: Multiple stow directories24932
Node: Conflicts26080
Node: Bootstrapping27238
Node: Reporting bugs27995
Node: Known bugs28875
Node: GNU General Public License29572
Node: Index48744

End Tag Table
